// import Text "mo:base/Text";
// import Matchers "mo:matchers/Matchers";
import T "mo:matchers/Testable";
// import Suite "mo:matchers/Suite";
import Blob "mo:base/Blob"; 
import Cbor "../src/Cbor";
import Debug "mo:base/Debug";
import Result "mo:base/Result";


// let equals10 = Matchers.equals(T.nat(10));
// let equals20 = Matchers.equals(T.nat(20));
// let greaterThan10: Matchers.Matcher<Nat> = Matchers.greaterThan(10);
// let greaterThan20: Matchers.Matcher<Nat> = Matchers.greaterThan(20);

// let suite = Suite.suite("CborReader", [
//     Suite.test("Described as", 20, Matchers.describedAs("20's a lot mate.", equals10)),  
// ]);

// Suite.run(suite)

func test(bytes: [Nat8], expected : Cbor.CborValue) {
    let blob = Blob.fromArray(bytes);
    let reader = Cbor.CborReader(blob);
    let v = reader.read();
    if(v != #ok(expected)){
        Debug.trap("Invalid value. Expected: " # debug_show(#ok(expected)) # ", Actual: " # debug_show(v) # ", Bytes: " # debug_show(bytes));
    };
};

// Major Type 0
test([0x00], #majorType0(0));
test([0x01], #majorType0(1));
test([0x0a], #majorType0(10));
test([0x17], #majorType0(23));
test([0x18, 0x18], #majorType0(24));
test([0x18, 0x19], #majorType0(25));
test([0x18, 0x64], #majorType0(100));
test([0x19, 0x03, 0xe8], #majorType0(1000));
test([0x1a, 0x00, 0x0f, 0x42, 0x40], #majorType0(1000000));
test([0x1b, 0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00], #majorType0(1000000000000));
test([0x1b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], #majorType0(18446744073709551615));

// Major Type 1
test([0x20], #majorType1(0));
test([0x29], #majorType1(9));
test([0x38, 0x63], #majorType1(99));
test([0x39, 0x03, 0xe7], #majorType1(999));
test([0x3b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], #majorType1(18446744073709551615));

// Major Type 2
test([0x40], #majorType2([]));
test([0x44, 0x01, 0x02, 0x03, 0x04], #majorType2([0x01, 0x02, 0x03, 0x04]));
test([0x58, 0x01, 0x02], #majorType2([0x02]));
test([0x59, 0x00, 0x01, 0x03], #majorType2([0x03]));
test([0x5a, 0x00, 0x00, 0x00, 0x01, 0x04], #majorType2([0x04]));
test([0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05], #majorType2([0x05]));
// Indef
test([0x5f, 0x44, 0xaa, 0xbb, 0xcc, 0xdd, 0xff], #majorType2([0xaa, 0xbb, 0xcc, 0xdd]));
test([0x5f, 0x42, 0x01, 0x02, 0x43, 0x03, 0x04, 0x05, 0xff], #majorType2([0x01, 0x02, 0x03, 0x04, 0x05]));


// Major Type 3
test([0x60], #majorType3(""));
test([0x61, 0x61], #majorType3("a"));
test([0x64, 0x49, 0x45, 0x54, 0x46], #majorType3("IETF"));
test([0x62, 0x22, 0x5c], #majorType3("\"\\"));
test([0x62, 0xc3, 0xbc], #majorType3("\u{00fc}"));
test([0x63, 0xe6, 0xb0, 0xb4], #majorType3("\u{6c34}"));
// TODO test failure
// test([0x64, 0xf0, 0x90, 0x85, 0x91], #Invalid(#UTF8String));
//Indef 
test([0x7f, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x67, 0xff], #majorType3("streaming"));




// Major Type 4
test([0x80], #majorType4([]));
test([0x83, 0x01, 0x02, 0x03], #majorType4([#majorType0(1), #majorType0(2), #majorType0(3)]));
test([0x83, 0x01, 0x82, 0x02, 0x03, 0x82, 0x04, 0x05], #majorType4([#majorType0(1), #majorType4([#majorType0(2), #majorType0(3)]), #majorType4([#majorType0(4), #majorType0(5)])]));
test([0x98, 0x19, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x18, 0x18, 0x19], #majorType4([#majorType0(1), #majorType0(2), #majorType0(3), #majorType0(4), #majorType0(5), #majorType0(6), #majorType0(7), #majorType0(8), #majorType0(9), #majorType0(10), #majorType0(11), #majorType0(12), #majorType0(13), #majorType0(14), #majorType0(15), #majorType0(16), #majorType0(17), #majorType0(18), #majorType0(19), #majorType0(20), #majorType0(21), #majorType0(22), #majorType0(23), #majorType0(24), #majorType0(25)]));
// Indef
test([0x9f, 0xff], #majorType4([]));
test([0x9f, 0x01, 0x82, 0x02, 0x03, 0x9f, 0x04, 0x05, 0xff, 0xff], #majorType4([#majorType0(1), #majorType4([#majorType0(2), #majorType0(3)]), #majorType4([#majorType0(4), #majorType0(5)])]));
test([0x9f, 0x01, 0x82, 0x02, 0x03, 0x82, 0x04, 0x05, 0xff], #majorType4([#majorType0(1), #majorType4([#majorType0(2), #majorType0(3)]), #majorType4([#majorType0(4), #majorType0(5)])]));
test([0x83, 0x01, 0x82, 0x02, 0x03, 0x9f, 0x04, 0x05, 0xff], #majorType4([#majorType0(1), #majorType4([#majorType0(2), #majorType0(3)]), #majorType4([#majorType0(4), #majorType0(5)])]));
test([0x83, 0x01, 0x9f, 0x02, 0x03, 0xff, 0x82, 0x04, 0x05], #majorType4([#majorType0(1), #majorType4([#majorType0(2), #majorType0(3)]), #majorType4([#majorType0(4), #majorType0(5)])]));
test([0x9f, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x18, 0x18, 0x19, 0xff], #majorType4([#majorType0(1), #majorType0(2), #majorType0(3), #majorType0(4), #majorType0(5), #majorType0(6), #majorType0(7), #majorType0(8), #majorType0(9), #majorType0(10), #majorType0(11), #majorType0(12), #majorType0(13), #majorType0(14), #majorType0(15), #majorType0(16), #majorType0(17), #majorType0(18), #majorType0(19), #majorType0(20), #majorType0(21), #majorType0(22), #majorType0(23), #majorType0(24), #majorType0(25)]));

// Major Type 6
// test([0xc2, 0x49, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], #majorType6({tag: 18446744073709551616));
// test([0xc3, 0x49, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], #majorType6({tag: -18446744073709551617));
